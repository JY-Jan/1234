package com.cn.services;
/**

 * @author GMZ

 * @since 2020.4.8

 */
import java.util.ArrayList;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import com.cn.mappers.Pm_memberMapper;
import com.cn.models.Pm_member;
import com.cn.models.Pm_user;
import com.github.tools.annotations.api.FunctionDescriber;
import com.github.webfrk.core.HttpBodyHandler;
import com.github.tools.annotations.ServiceDefinition;
import com.github.tools.annotations.api.Required;

/**
 * This code is auto-generated by <code>ServiceGenerator<code>
 *
 */
@ServiceDefinition
public class Pm_memberService extends HttpBodyHandler {

	@Autowired
	private Pm_memberMapper pm_memberMapper;

	/* 展示某一项目所有成员的信息 */
	@FunctionDescriber(shortName = "展示某一项目所有成员的信息", description = "暂无", prerequisite = "暂无")
	public java.util.List<com.cn.models.Pm_member> getPm_member(Integer project_id) {
		return pm_memberMapper.getPm_member(project_id);
	}

	/* 查询用户进入项目得权限，返回角色ID，让前台判断是不是PO */
	@FunctionDescriber(shortName = "查询用户进入项目得权限", description = "暂无", prerequisite = "暂无")
	public java.lang.Integer getPm_project(Integer project_id, Integer user_id) {
		return pm_memberMapper.getPm_project(project_id, user_id);
	}

	/* 成员列表展示没有进入项目的所有用户信息 */
	@FunctionDescriber(shortName = "展示所有用户的信息", description = "暂无", prerequisite = "暂无")
	public java.util.List<com.cn.models.Pm_user> getPm_user(Integer project_id) {
		
		List<Pm_member> pm_merbers = pm_memberMapper.getPm_member(project_id);
	
		List<Pm_user> pm_users = pm_memberMapper.getPm_user();
		
		List<Pm_user> users = new ArrayList<Pm_user>();

		for (Pm_user pm_user : pm_users) {
			for (int i = 0; i < pm_merbers.size(); i++) {

				if (i < pm_merbers.size() - 1) {
					if (pm_user.getUser_id() == pm_merbers.get(i).getUser_id()) {
						break;
					}
				} else {
					if (pm_user.getUser_id() == pm_merbers.get(i).getUser_id()) {
						break;
					} else {
						users.add(pm_user);
					}
				}
			}

		}
		return users;
	}	 
	

	/* 添加成员 */
	@FunctionDescriber(shortName = "添加成员", description = "暂无", prerequisite = "暂无")
	public void addPm_member(Integer project_id, Integer user_id) {
		pm_memberMapper.addPm_member(project_id, user_id);
	}

	/* 修改角色 */
	@FunctionDescriber(shortName = "修改角色", description = "暂无", prerequisite = "暂无")
	public void updateMemberRole(Integer member_id, @Required(false) Integer role_id) {
		pm_memberMapper.updateMemberRole(member_id, role_id);
	}

	/* 移除成员 */
	@FunctionDescriber(shortName = "移除成员", description = "暂无", prerequisite = "暂无")
	public void deletePm_member(Integer project_id, Integer user_id) {
		pm_memberMapper.deletePm_member(project_id, user_id);
	}

	/*
	 * 可以不需要 成员列表展示所有角色
	 * 
	 * @FunctionDescriber(shortName = "展示所有角色", description = "暂无", prerequisite =
	 * "暂无") public java.util.List<com.cn.models.Pm_role> getPm_role() { return
	 * pm_memberMapper.getPm_role(); }
	 */

}