/**
 * Copyrigt (2020, ) Institute of Software, Chinese Academy of Sciences
 */
package com.cn.services;

import org.springframework.beans.factory.annotation.Autowired;

import com.cn.mappers.Pm_flowMapper;
import com.cn.mappers.Pm_storyMapper;
import com.cn.models.Pm_flow;
import com.cn.models.Pm_story;
import com.github.tools.annotations.api.FunctionDescriber;
import com.github.webfrk.core.HttpBodyHandler;
import com.github.tools.annotations.ServiceDefinition;

import java.math.BigInteger;
import java.util.List;

import javax.validation.*;

/**
 * This code is auto-generated by <code>ServiceGenerator<code>
 *
 */
@ServiceDefinition
public class Pm_storyService extends HttpBodyHandler {

	@Autowired
	private Pm_storyMapper pm_storyMapper;

	@Autowired
	private Pm_flowMapper pm_flowMapper;

	/*
	 * 邢娇娇
	 */
	@FunctionDescriber(shortName = "展示某一项目所有成员的信息", description = "暂无", prerequisite = "暂无")
	public java.util.List<com.cn.models.Pm_story> getPmMember(BigInteger story_id) {
		return pm_storyMapper.getPmMember(story_id);
	}

	@FunctionDescriber(shortName = "添加用户故事", description = "暂无", prerequisite = "暂无")
	public void addPmStory(@Valid Pm_story pm_story) {
		pm_storyMapper.addPmStory(pm_story);
	}

	/*
	 * @FunctionDescriber(shortName = "根据Id删除用户故事", description = "暂无", prerequisite
	 * = "暂无") public void deletePmStory(@Valid Pm_story pm_story) {
	 * System.out.println(pm_story); pm_storyMapper.deletePmStory(pm_story); }
	 */
	@FunctionDescriber(shortName = "根据Id删除用户故事", description = "暂无", prerequisite = "暂无")
	public void deletePmStory(@Valid String story_id, String story_con, String story_not, String story_stan,
			String story_pri, String story_state) {
		Pm_story pm_story = new Pm_story();
		pm_story.setStory_id(Integer.parseInt(story_id));
		pm_story.setStory_con(story_con);
		pm_story.setStory_not(story_not);
		pm_story.setStory_stan(story_stan);
		pm_story.setStory_pri(story_pri);
		pm_story.setStory_state(story_state);
		System.out.println(pm_story);
		pm_storyMapper.deletePmStory(pm_story);
	}

	/* GMZ */
	@FunctionDescriber(shortName = "根据id更新用户故事PO", description = "暂无", prerequisite = "暂无")
	public void updatePmStory(String lane_id, BigInteger story_id, String story_con, String story_not,
			String story_stan, String story_pri, String story_state, String story_number, String user_name,
			BigInteger project_id) {
		String storyid=String.valueOf(story_id);//-------------GMZ
        System.out.println("我进入updatePmStory了");
		Pm_story pm_story = new Pm_story();
		pm_story.setStory_id(Integer.parseInt(storyid));//-----------------GMZ
		pm_story.setStory_con(story_con);
		pm_story.setStory_not(story_not);
		pm_story.setStory_stan(story_stan);
		pm_story.setStory_pri(story_pri);
		pm_story.setStory_number(story_number);
		pm_story.setUser_name(user_name);
		/* GMZ */
		Pm_flow pm_flow = pm_flowMapper.queryflowByLane(lane_id, story_state, project_id);
		if (pm_flow != null) {
			System.out.println("有流转规则");
			//有流转规则，进行添加流转规则后的用户故事状态和泳道列表
			pm_story.setStory_state(pm_flow.getLane_state());
			pm_story.setLane_id(pm_flow.getLane_name2());
			pm_storyMapper.updatePmStory(pm_story);
		} else {
			System.out.println("没有流转规则");
			//没有流转规则，进行添加流转规则后的用户故事状态和泳道列表
			pm_story.setStory_state(story_state);
			pm_story.setLane_id(lane_id);
			pm_storyMapper.updatePmStory(pm_story);

		}

	}

	@FunctionDescriber(shortName = "根据id更新用户故事SM", description = "暂无", prerequisite = "暂无")
	public void updatePmStorySM(@Valid String story_id, String story_state, String story_number, String user_name) {
		Pm_story pm_story = new Pm_story();
		pm_story.setStory_id(Integer.parseInt(story_id));
		// pm_story.setLane_id(Integer.parseInt(lane_id));
		pm_story.setStory_state(story_state);
		pm_story.setStory_number(story_number);
		pm_story.setUser_name(user_name);
		System.out.println(pm_story);
		pm_storyMapper.updatePmStorySM(pm_story);
	}

	@FunctionDescriber(shortName = "根据泳道id和项目id查询用户故事", description = "暂无", prerequisite = "暂无")
	public java.util.List<com.cn.models.Pm_story> getProLaneStory(BigInteger lane_id, BigInteger project_id)
			throws Exception {
		if (lane_id == null || project_id == null) {
			throw new Exception("请求参数有问题");
		}
		return pm_storyMapper.getProLaneStory(lane_id, project_id);
	}

	@FunctionDescriber(shortName = "根据泳道id查询用户故事", description = "暂无", prerequisite = "暂无")
	public java.util.List<com.cn.models.Pm_story> getLaneStory(BigInteger lane_id) throws Exception {
		if (lane_id == null) {
			throw new Exception("请求参数有问题");
		}
		return pm_storyMapper.getLaneStory(lane_id);
	}

	@FunctionDescriber(shortName = "根据id查询用户故事", description = "暂无", prerequisite = "暂无")
	public com.cn.models.Pm_story getPmStory(BigInteger story_id) throws Exception {
		if (story_id == null) {
			throw new Exception("请求参数有问题");
		}
		return pm_storyMapper.getPmStory(story_id);
	}

	/* ++++++++++++++++sxw+++++++++++++++++++++++++ */
	@FunctionDescriber(shortName = "根据迭代id展示该迭代的用户故事", description = "暂无", prerequisite = "暂无")
	public List<Pm_story> listPm_iteration(BigInteger iteration_id) {
		return pm_storyMapper.listPm_iteration(iteration_id);
	}
	
	/* ++++++++++++++++++++++++++++++++耿明泽++++++++++++++++++++++++++++++++++++++ */
	@FunctionDescriber(shortName = "查询某一项目的所有用户故事事", description = "暂无", prerequisite = "暂无")
	public List<Pm_story> getAllStorys(BigInteger project_id){
		return pm_storyMapper.getAllStorys(project_id);
	}
	@FunctionDescriber(shortName = "根据Id删除用户故事", description = "暂无", prerequisite = "暂无")
	public void deleteStoryById(BigInteger story_id) {
		pm_storyMapper.deleteStoryById(story_id);
	}

}