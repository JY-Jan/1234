package com.cn.services;

import java.math.BigInteger;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import javax.validation.Valid;

import org.springframework.beans.factory.annotation.Autowired;
import com.github.tools.annotations.api.FunctionDescriber;
import com.github.webfrk.core.HttpBodyHandler;
import com.github.tools.annotations.ServiceDefinition;
import com.cn.mappers.Pm_memberMapper;
import com.cn.mappers.Pm_projectMapper;
import com.cn.mappers.Pm_userMapper;
import com.cn.models.Pm_project;

/**
 * This code is auto-generated by <code>ServiceGenerator<code>
 *
 */
@ServiceDefinition
public class Pm_projectService extends HttpBodyHandler {

	@Autowired
	private Pm_projectMapper pm_projectMapper;
	@Autowired
	private Pm_memberMapper pm_memberMapper;
	@Autowired
	private Pm_userMapper pm_userMapper;

	/*
	 * @FunctionDescriber(shortName = "查询用户进入项目得权限", description = "暂无",
	 * prerequisite = "暂无") public java.util.List<com.cn.models.Pm_project>
	 * getPm_project() { return pm_projectMapper.getPm_project(); }
	 */
	/***************************** 耿明泽 ***********************************/
	@FunctionDescriber(shortName = "展现当前项目是否归档", description = "暂无", prerequisite = "暂无")
	public String getProject_State(BigInteger project_id) {
		return pm_projectMapper.getProject_State(project_id);
	}

	@FunctionDescriber(shortName = "归档项目/取消归档项目", description = "暂无", prerequisite = "暂无")
	public void updatePm_project(BigInteger project_id, String project_state) {
		System.out.println(project_id);
		System.out.println(project_state);
		pm_projectMapper.updatePm_project(project_id, project_state);
	}
	
	/***************************** 耿明泽 ***********************************/

	@FunctionDescriber(shortName = "更新项目信息", description = "暂无", prerequisite = "暂无")
	public Integer updateProject(@Valid String project_id, String project_name, String project_spr, String project_type,
			String project_des, String project_men, String project_time) {
		Pm_project project = new Pm_project();
		project.setProject_id(Integer.parseInt(project_id));
		project.setProject_name(project_name);
		project.setProject_spr(project_spr);
		project.setProject_type(project_type);
		project.setProject_des(project_des);
		project.setProject_men(project_men);
		project.setProject_time(project_time);
		return pm_projectMapper.updateProject(project);
	}

	@FunctionDescriber(shortName = "添加项目信息", description = "暂无", prerequisite = "暂无")
	public void addProjectInfo(@Valid Pm_project pm_project) {
		Date date = new Date();
		SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
		pm_project.setProject_time(sdf.format(date));
		// 还没有写登录，暂时直接确定创建人
		pm_project.setProject_men("魏文青");
		pm_projectMapper.addProjectInfo(pm_project);
		System.out.println(pm_project);
	}

	// 根据项目id查询项目信息
	@FunctionDescriber(shortName = "根据项目id查询项目信息", description = "暂无", prerequisite = "暂无")
	public com.cn.models.Pm_project queryById(BigInteger project_id) {
		return pm_projectMapper.queryById(project_id);
	}

	/*
	 * @FunctionDescriber(shortName = "删除项目信息", description = "暂无", prerequisite =
	 * "暂无") public void deleteProject(@Valid Pm_project pm_project) {
	 * pm_projectMapper.deleteProject(pm_project); }
	 */
 
	/***************************** 耿明泽 ***********************************/
	// 展示所有项目
	@FunctionDescriber(shortName = "展示所有项目", description = "暂无", prerequisite = "暂无")
	public List<Pm_project> getProjects(String param, BigInteger user_id) {

		// 查询有哪些项目
		List<Pm_project> projects = pm_projectMapper.getProjects();
		// 未归档项目
		List<Pm_project> openProjects = new ArrayList<Pm_project>();
		// 已归档项目
		List<Pm_project> closeProjects = new ArrayList<Pm_project>();
		// 查询成员列表当前参与项目的id
		List<Integer> project_ids = pm_projectMapper.project_ids(user_id);
		System.out.println("是否能在成员列表中有项目" + project_ids.size());

		// 获取当前用户的角色
		int userRole_id = pm_memberMapper.getUserRoleById(user_id);

		if (userRole_id == 2 || userRole_id == 3 || userRole_id == 1) {// 财务主管/组织高管/系统管理员
			for (Pm_project project : projects) {
				if (project.getProject_state().equals("1")) {// 归档
					closeProjects.add(project);
				} else {// 未归档
					openProjects.add(project);
				}
			}
		} else if (userRole_id == 4) {// 部门主管

			List<Pm_project> dManageProjects1 = pm_projectMapper.getShowProjects("0", "1");// 公开归档项目
			List<Pm_project> dManageProjects2 = pm_projectMapper.getShowProjects("0", "0");// 公开未归档项目
			List<Pm_project> dManageProjects3 = pm_projectMapper.getShowProjects("1", "1");// 私有归档项目
			List<Pm_project> dManageProjects4 = pm_projectMapper.getShowProjects("1", "0");// 私有未归档项目

			// 添加公开归档项目
			if (dManageProjects1.size() != 0) {
				for (Pm_project pm_project : dManageProjects1) {
					closeProjects.add(pm_project);
				}
			}

			// 添加公开未归档项目
			if (dManageProjects2.size() != 0) {
				for (Pm_project pm_project : dManageProjects2) {
					openProjects.add(pm_project);
				}
			}

			// 存放部门下的成员参与的私有项目----没有任何重复的项目
			List<Pm_project> dManageProjects = new ArrayList<Pm_project>();
			System.out.println("部门主管1");

			// 查询该部门主管是哪个部门的
			Integer department_id = pm_userMapper.getDepartmentId(user_id);
			System.out.println("部门主管2");
			if (department_id != null) {
				System.out.println("departmentid:" + department_id);

				// 查询部门下所有成员参与的所有私有项目-----此时可能有重复项目
				List<Pm_project> memberPersonProjects = pm_projectMapper.queryUserAllPersonProjects(department_id);
				System.out.println("查询部门下所有成员参与的所有私有项目数目:" + memberPersonProjects.size());
				if (memberPersonProjects.size() != 0) {
					for (int i = 0; i < memberPersonProjects.size(); i++) {
						if (i == 0) {// 第一个私有项目必添加
							dManageProjects.add(memberPersonProjects.get(i));
						} else {
							for (Pm_project dManageProject : dManageProjects) {
								if (dManageProject == memberPersonProjects.get(i)) {// 其余私有项目要和已添加的私有项目比较看是否重复
									dManageProjects.add(memberPersonProjects.get(i));
								}
							}
						}
					}
				}
			}

			// 添加私有归档项目
			if (dManageProjects.size() != 0) {
				if (dManageProjects3.size() != 0) {
					for (Pm_project pm_project : dManageProjects3) {
						for (Pm_project project : dManageProjects) {
							if (pm_project.getProject_id() == project.getProject_id()) {
								closeProjects.add(pm_project);
							}
						}
					}
				}
				// 添加私有未归档项目
				if (dManageProjects4.size() != 0) {
					for (Pm_project pm_project : dManageProjects4) {
						for (Pm_project project : dManageProjects) {
							if (pm_project.getProject_id() == project.getProject_id()) {
								openProjects.add(pm_project);
							}
						}
					}
				}
			}
		} else {// 客户/无角色人员
			if (project_ids.size() == 0) {
				System.out.println("该成员没有参与任何项目");
			} else {// 客户/PO/SM/开发者
				if (userRole_id == 8) {// 客戶
					System.out.println("客戶");
					closeProjects = pm_projectMapper.getProjectsByProjectState("1", user_id);//
					openProjects = pm_projectMapper.getProjectsByProjectState("0", user_id);
				} else {// PO/SM/开发者
					for (Pm_project project : projects) {
						if (project.getProject_state().equals("1")) {// 归档
							System.out.println("close0：" + project.getProject_state());
							// 公开的
							if (project.getProject_type().equals("0")) {
								System.out.println("close1：" + project);
								closeProjects.add(project);
							} else {
								// 私有的
								for (Integer project_id : project_ids) {
									// 参与的
									if (project.getProject_id() == project_id) {
										System.out.println("close2：" + project);
										closeProjects.add(project);
									}
								}
							}
						} else {// 未归档
							if (project.getProject_type().equals("0")) {// 公开的
								System.out.println("open0：" + project.getProject_state());
								openProjects.add(project);
							} else {// 私有的
								for (Integer project_id : project_ids) {
									// 参与的
									if (project.getProject_id() == project_id) {
										System.out.println("open1：" + project.getProject_state());
										openProjects.add(project);
									}
								}
							}
						}
					}
				}
			}
		}

		// 返回前台
		if (param.equals("1")) {
			System.out.println("param1:" + param);
		    Pm_project pm_project=new Pm_project();
					for (int i = 0; i < closeProjects.size()-1; i++) {//从大到小
						for (int j = 0; j < closeProjects.size()-i-1; j++) {// 交换位置
							if(closeProjects.get(j+1).getProject_id()>closeProjects.get(j).getProject_id()) {
								pm_project=closeProjects.get(j);
								closeProjects.set(j,closeProjects.get(j+1));
								closeProjects.set(j+1,pm_project);
							}
						}
					}
			return closeProjects;// 已归档项目
		} else {
			System.out.println("param0:" + param);
		
		    Pm_project pm_project=new Pm_project();
			for (int i = 0; i < openProjects.size()-1; i++) {//从大到小(時間)
				for (int j = 0; j < openProjects.size()-i-1; j++) {// 交换位置
					if(openProjects.get(j+1).getProject_id()>openProjects.get(j).getProject_id()) {
						pm_project=openProjects.get(j);
						openProjects.set(j,openProjects.get(j+1));
						openProjects.set(j+1,pm_project);
					}
				}
			}
			return openProjects;// 正在进行的项目
		}
	}
}